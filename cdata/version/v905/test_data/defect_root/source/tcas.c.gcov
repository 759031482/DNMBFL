        -:    0:Source:/home/cyxy/files/access/cdata/version/v905/test_data/defect_root/source/tcas.c
        -:    0:Graph:/home/cyxy/files/access/cdata/version/v905/test_data/defect_root/source/tcas.gcno
        -:    0:Data:/home/cyxy/files/access/cdata/version/v905/test_data/defect_root/source/tcas.gcda
        -:    0:Runs:3
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:typedef struct {
        -:    5:     int a;
        -:    6:     int b;
        -:    7:     int c;
        -:    8:} employee;
        -:    9:
    #####:   10:int cmp(const void *a, const void *b)
        -:   11:{
    #####:   12:     return ((employee *)a)->c - ((employee *)b)->c;
        -:   13:}
        -:   14:
        3:   15:int main(int argc, char *argv[])
        -:   16:{
        3:   17:     int n, m, sum = 0, f = 0, i;
        3:   18:     int q[1000], a[1000] = {0};
        -:   19:     employee e[10000];
        -:   20:
        3:   21:     scanf("%d", &n);
        -:   22:
        6:   23:     for (i = 0; i < n; i++) scanf("%d", &q[i]);
        -:   24:
        3:   25:     scanf("%d", &m);
        -:   26:
       3*:   27:     for (i = 0; i < m; i++) scanf("%d %d %d", &e[i].a, &e[i].b, &e[i].c);
        -:   28:
        3:   29:     if (n == 1) {
        3:   30:	  puts("0");
        -:   31:
        3:   32:	  return 0;
        -:   33:     }
        -:   34:
    #####:   35:     qsort(e, m, sizeof(employee), cmp);
        -:   36:
    #####:   37:     for (i = 0; i < m; i++) {
    #####:   38:	  if (q[e[i].a - 1] <= q[e[i].b - 1]) continue;
        -:   39:
    #####:   40:	  if (a[e[i].b - 1] != 1) {
    #####:   41:	       if (a[e[i].a - 1] == 0) {
    #####:   42:		    a[e[i].a - 1] = 2;
    #####:   43:		    a[e[i].b - 1] = 1;
        -:   44:
    #####:   45:		    sum += e[i].c;
        -:   46:	       } else {
    #####:   47:		    a[e[i].b - 1] = 1;
        -:   48:
    #####:   49:		    sum += e[i].c;
        -:   50:	       }
        -:   51:	  }
        -:   52:     }
        -:   53:
    #####:   54:     for (i = 0; i < n; i++) {
    #####:   55:	  if (a[i] == 0) {
    #####:   56:	       puts("-1");
        -:   57:
    #####:   58:	       return 0;
    #####:   59:	  } else if (a[i] == 2) {
    #####:   60:	       f++;
        -:   61:	  }
        -:   62:     }
        -:   63:
    #####:   64:     if (f > 1) {
    #####:   65:	  puts("-1");
        -:   66:     } else {
    #####:   67:	  printf("%d\n", sum);
        -:   68:     }
        -:   69:
    #####:   70:     return 0;
        -:   71:}
